Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

 

Example 1:

Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Example 2:

Input: nums = [0]
Output: [0]
 
 
 
 class Solution {
public:
//1st approch
    vector<int> sortArrayByParity(vector<int>& nums) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
           if(nums[i]%2==0){
            ans.push_back(nums[i]);
           }
        }
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]%2!=0)
            {
                ans.push_back(nums[i]);
            }
        }
        return ans;
    }
	//2nd approch
    vector<int> sortArrayByParity(vector<int>& nums) {
        int n=nums.size();
        vector<int>ans(n);
        int x=0,y=n-1;
        for(int i=0;i<n;i++)
        {
            if(nums[i]%2==0){
                ans[x]=nums[i];
                x++;
            }
            else{
                ans[y]=nums[i];
                y--;
            }
        }
        return ans;
    }
	//3rd approch
    vector<int> sortArrayByParity(vector<int>& nums) {
        int x=0;int y=0;
        int n=nums.size();
        while(y<n)
        {
            if(nums[y]%2==0){
                swap(nums[x],nums[y]);
                x++;y++;
            }
            else{
                y++;
            }
        }
        return nums;
    }
};
