Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.

Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.

 

Example 1:

Input: n = 12
Output: 21
Example 2:

Input: n = 21
Output: -1


+++++++++++

approach 1
class Solution {
public:
    int nextGreaterElement(int n) {
        string a = to_string(n);
        next_permutation(a.begin(),a.end());
        if(is_sorted(a.begin(),a.end())) return -1;
        else return stol(a)>INT_MAX? -1: stoi(a);
    }
};

Approach 2


O(nlogn)
 class Solution {
public:
    int nextGreaterElement(int n) {
        string s = to_string(n);
        int j = s.size();
        while(j>0){
            if(s[j-1] < s[j])
                break;
            j--;
        }
        if(j==0) return -1;
        int i = j;
        int min = j;
        for(i=j;i<s.size();i++)
        {
            if(s[i] < s[min] && s[i] > s[j-1]){
                min = i;
            }
        }
        char temp = s[min];
        s[min] = s[j-1];
        s[j-1] = temp;
        
        sort(s.begin()+j, s.end());
        int ans = 0;
        return stol(s)>INT_MAX?-1:stol(s);
    }
};
