Given a string s1 and a string s2, write a snippet to say whether s2 is a rotation of s1? 
(eg given s1 = ABCD and s2 = CDAB, return true, given s1 = ABCD, and s2 = ACBD , return false)

Algorithm: areRotations(str1, str2)

 1. Create a temp string and store concatenation of str1 to
       str1 in temp.
                          temp = str1.str1
    2. If str2 is a substring of temp then str1 and str2 are 
       rotations of each other.

    Example:                 
                     str1 = "ABACD"
                     str2 = "CDABA"

     temp = str1.str1 = "ABACDABACD"
     Since str2 is a substring of temp, str1 and str2 are 
     rotations of each other.\
     
     
     /* Function checks if passed strings (str1
   and str2) are rotations of each other */
   
    /* Check if sizes of two strings are same */
    /* Driver program to test areRotations */
     
     
     
     class Solution {
public:
    bool rotateString(string s, string goal) {
        if(s.length()!=goal.length())
        {
            return false;}
            
   string temp = s + s;
   return (temp.find(goal) != string::npos);
        
    }
};





method 2__________+++++++++++++
bool rotateString(string s, string goal) {
        // if s has different size as goal then there's no way to make them the same
        if (s.size() != goal.size()) {
            return false;
        }
        // the result of find means through how many shifts s can become goal
        // if s can become goal in goal.size() shifts, then return true
        return (goal + goal).find(s, 0) < goal.size();
    }
    
    
    
    method3+++++++++++++
    class Solution {
public:
bool rotateString(string str, string goal) {
for (int i = 0; i < str.length(); i++)
{

    rotate(str.begin(), str.begin() + 1, str.end());
    if (!str.compare(goal)) {
        return true;
    }
}
    return false;  
}
};
