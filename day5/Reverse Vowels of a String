Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.

 

Example 1:

Input: s = "hello"
Output: "holle"
Example 2:

Input: s = "leetcode"
Output: "leotcede"
 

Constraints:

1 <= s.length <= 3 * 105
s consist of printable ASCII characters.


The question says to reverse only the vowels and leave other alphabets as they are.
Here's a function to check whether a letter is a vowel or not:

bool isVowel(char a){
        if( a=='a' || a=='e' || a=='i' || a=='o' || a=='u' || 
		    a=='A' || a=='E' || a=='I' || a=='O' || a=='U' ) 
			return true;
        return false;
    }
After this we just need a two-pointer method, one pointer at the start (l) other at the end (r), loop till l<r.
In each iteration check whether the Ith element and rth element both are vowel or not.

If both of them are vowel swap the elements and increment l by 1 and decrement r by 1.
If only lth element is a vowel decrement r by 1.
If only rth element is a vowel decrement l by 1.
If none of them are vowels then increment l by 1 and decrement r by 1.
Following function does the same:

string reverseVowels(string s) {
        int i=0, j=s.size()-1;
        while(i<j){
            if(isVowel(s[i]) && isVowel(s[j])) swap(s[i++], s[j--]);
            else if(isVowel(s[i])) j--;
            else if(isVowel(s[j])) i++;
            else{ 
                i++; j--;
            }
        }
        return s;
    }
Time Complexity: O(N)
Space Complexity: O(1)
