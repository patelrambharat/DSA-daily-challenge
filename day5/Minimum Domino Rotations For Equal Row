In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)

We may rotate the ith domino, so that tops[i] and bottoms[i] swap values.

Return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.

If it cannot be done, return -1.


hashmap solution

class Solution {
public:
    int minDominoRotations(vector<int>& t, vector<int>& b) {
         int n=t.size();
        map<int,int>mp;
        for(int i=0;i<n;i++)
        {
            mp[t[i]]++;
            mp[b[i]]++;
        }
        int a=-1;
        for(auto val:mp)
        {
            if(val.second>=n){a=val.first;}
        }
        if(a==-1) return a;
        int x=0,y=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]!=a) x++;
            if(b[i]!=a) y++;
            if(t[i]!=a && b[i]!=a ) return -1;
        }
        return min(x,y);

    }
};









method 2 O(n)
/* we have to make equal either on top or bottom by swapping so one bsevation is that 
count of element in top and bottom must  be >= n  then only it is possible .
//we have find that element using map whose count is >= n
		unordered_map<int , int > map;
        int value = 0;
        int maxcount =0;
        int i;
        int n = tops.size();
        for(i=0; i<n; i++)
        {
            map[tops[i]]++;
            map[bottoms[i]]++;
        }
        
        for(auto itr : map)
        {
           if( maxcount < itr.second){
               maxcount = itr.second;
               value = itr.first;
           }
        }
        //after the element which can be swapped 
		//let find ho many swap is required 
        int count1=0;
        for(i = 0 ; i<n; i++)
        {
            if(value != tops[i])//if value does not match 
            {
                if(bottoms[i] == value){count1++;}///then we need to swap that is same value 
				//should be present in other vector 
				//if not so then we can not make them equal 
                else{
                    count1 = -1;
                    break;
                }
            }
        }
        int count2=0;
         for(i = 0 ; i<n; i++)
        {
            if(value != bottoms[i])
            {
                if(tops[i] == value){count2++;}
                else {count2 = -1; break;}
            }
        }
       if(count1 == -1 && count2 == -1){return -1;}
        else{
            if(count1 != -1 && count2 != -1)
            {
                return min(count1 , count2);
            }
            else{
                if(count1 != -1){return count1;}
                else{
                    return count2;
                }
            }
        }









Input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]
Output: 2
Explanation: 
The first figure represents the dominoes as given by tops and bottoms: before we do any rotations.
If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.
Example 2:

Input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]
Output: -1
Explanation: 
In this case, it is not possible to rotate the dominoes to make one row of values equal.
 

Constraints:

2 <= tops.length <= 2 * 104
bottoms.length == tops.length
1 <= tops[i], bottoms[i] <= 6
