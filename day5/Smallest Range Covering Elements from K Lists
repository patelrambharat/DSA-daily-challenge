You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
Example 3:

Input: nums = [[10,10],[11,11]]
Output: [10,11]
Example 4:

Input: nums = [[10],[11]]
Output: [10,11]
Example 5:

Input: nums = [[1],[2],[3],[4],[5],[6],[7]]
Output: [1,7]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order.





vector<int> smallestRange(vector<vector<int>>& nums) {
        vector<pair<int,int> > a;  //The big list
        for(int i=0;i<nums.size();i++)
        {
            for(int j: nums[i])
            {
                a.push_back({j,i}); //merging  // (value,list number)
            }
        }
        sort(a.begin(),a.end());
        int j=0;  //the left pointer
        int total=0; //the elements between the two pointers are from how many lists
        int diff=nums.size(); // total number of lists
        int mp[diff]; // map to store how many elements from each lists we have seen till now
        memset(mp,0,sizeof(mp)); //initially all  of them should be zero
        vector<int> ans; //vector containing the range
        int mini=INT_MAX;  // initially the range should be a big number
        
        for(int i=0;i<a.size();i++)
        {
           mp[a[i].second]++;  //increase the current element list number 
           if(mp[a[i].second]==1) //if the value is 1 , then it denots elements from that list has occured first time
           {
               total++;  //so we can increase total 
           }
            if(total==diff) //when elements from all the lists has been seen
            {
                if(a[i].first-a[j].first+1<mini) //checking that the current range is smaller or not
                {
				//if smaller then update
                    mini=a[i].first-a[j].first+1;
                    ans={a[i].first,a[j].first};
                }
            }
            if(total==diff) 
            {
                while(total==diff) //now time to move the first pointer right . If there are more than one element from a list , then we can shift the left pointer
                {
                    if(mp[a[j].second]>1) mp[a[j].second]--,j++;
                    else break;
                }
                if(a[i].first-a[j].first+1<mini) //after shifting the left pointer , again check if the range becomes smaller or not
                {
                    mini=a[i].first-a[j].first+1;
                    ans={a[i].first,a[j].first};
                }
            }
        }
        return ans;
    }
