This week Arkady wanted to cook some pancakes (to follow ancient traditions) and make a problem about that. But then he remembered that one can't make a problem about stacking pancakes without working at a specific IT company, so he decided to bake the Napoleon cake instead.

To bake a Napoleon cake, one has to bake n dry layers first, and then put them on each other in one stack, adding some cream. Arkady started with an empty plate, and performed the following steps n times:

place a new cake layer on the top of the stack;
after the i-th layer is placed, pour ai units of cream on top of the stack.
When x units of cream are poured on the top of the stack, top x layers of the cake get drenched in the cream. If there are less than x layers, all layers get drenched and the rest of the cream is wasted. If x=0, no layer gets drenched.


inputCopy
3
6
0 3 0 0 1 3
10
0 0 0 1 0 5 0 0 0 2
3
0 0 0
outputCopy
1 1 0 1 1 1 
0 1 1 1 1 1 0 0 1 1 
0 0 0 


**********better Approach*********
#include <bits/stdc++.h>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int tt;
	cin >> tt;
	while (tt--) {
		int n;
		cin >> n;
		int a[n];
		for (int i = 0; i < n; i++) {
			cin >> a[i];
		}
		// start the from the second to the last element
		for (int i = n - 2; i >= 0; i--) {
			// the current value depends on the maximum between the 
			// current value and the previous value subtracted by 1
			a[i] = max(a[i], max(0, a[i + 1] - 1));
		}
		for (int i = 0; i < n; i++) {
			cout << (a[i] > 0 ? 1 : 0) << " ";
		}
		cout << '\n';
	}
	return 0;
}








cin.tie(NULL); tie() is a method which simply guarantees the flushing of 
std::cout before std::cin accepts an input. This is useful for interactive 
console programs which require the console to be updated constantly but also slows down the 
program for large I/O. The NULL part just returns a NULL pointer.
