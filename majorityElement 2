3 APPROACHES:

OPTIMAL APPROACH
BETTER APPROACH
BRUTE FORCE APPROACH
*/
// OPTIMAL APPROACH
// USING BOYER MOORE MAJORITY VOTING ALGORITHM
class Solution {
public:
vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size();
        int num1=-1,num2=-1;
        int count1=0, count2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==num1){
                count1++;
            }
            else if(nums[i]==num2){
                count2++;
            }
            else if(count1==0){
                num1=nums[i];
                count1=1;
            }
            else if(count2==0){
                num2=nums[i];
                count2=1;
            }
            else{
                count1--;
                count2--;
            }
        }
        vector<int>ans;
        count1=count2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==num1){
                count1++;
            }
            else if(nums[i]==num2){
                count2++;
            }
        }
        if(count1>n/3){
            ans.push_back(num1);
        }
        if(count2>n/3){
            ans.push_back(num2);
        }
        return ans;
    }
};

EXPLANATION:

As we know that in the given vector there can only be 2 majority element with more than n/3
We take 4 variable count1 and num1 (count 1 to store the count of num1) and same for count2 and num 2.
We traverse over the vector and checking the element and in end we get 2 numbers which is available in majority
We make count1 and count2 to 0, then traverse over the given vector checking the count of those numbers
If our count is more than n/3 then we push that num in our new answer vector
// BETTER APPROACH
// USING HASHMAP
class Solution {
public:

vector<int> majorityElement(vector<int>& nums) {
       unordered_map<int,int>map;
       int n=nums.size();
       vector<int>ans;
       for(int i=0;i<n;i++){
           map[nums[i]]++;
       }
       for(auto i:map){
           if(i.second>n/3){
               ans.push_back(i.first);
           }
       }
       return ans;
   }
};

EXPLANATION:
We use the unordered_map to store the number and its count, and we iterate the map to the value greater than n/3

BRUTE FORCE: We use the nested loop and check for every number's count greater than n/3
