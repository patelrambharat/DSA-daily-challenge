The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.


class Solution {
public:
    int fib(int n) {
        if(n==0)
            return 0;
        else if(n==1)
            return 1;
        return fib(n-1)+fib(n-2);
    }
};



next some approach+++++++++++++++
Approach 1: O(n) time
Calculating fibo(n) =fibo(n-1)+ fibo(n-2) =b+a using

fibo(n-1)->stored in b
fibo(n-2)->stored in a
Then, store back
b<-fibo(n)
a<-fibo(n-1) //this is prev value of b which can be obtained by (b-a)
Time: 0 ms, faster than 100.00% of C++ online submissions for Fibonacci Number.

class Solution {
public:
    int fib(int n) {
        if(n<2)return n;
        n++;
        int a=0,b=1;
        for(int i=2;i<n;i++){
            b+=a;
            a=b-a;
        }
        return b;
    }
};
**Approach 2: Using Binet's formula O(1) time **

F(n) = ((1+sqrt(5))^n - (1-sqrt(5))^n)/2^n * sqrt(5)

class Solution {
public:
    int fib(int N) {
		float root5 = sqrt(5);
        long long int denominator = (pow(2,N)*root5);
        long long int numerator1 = (pow(1+root5,N));
        long long int numerator2 = (pow(1-root5,N));
        return (numerator1-numerator2)/denominator;
    }
};
Above code will produce correct result for 1<=n<=30.
However, one should be aware of the fact that the Binet's formula produces correct results for small values of n only.
It fails to produce correct result even for n as large as 100 . This is because in Binet's formula, the rounding error is too large. It will produce the correct result for n<=70 (approx.)
Also note that for small values of n, iterative solution takes even lesser time than this complex calculation.
