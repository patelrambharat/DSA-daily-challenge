Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].


O(n2)

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        
      
        for(int i=0;i<nums.size();i++)
        {
            nums[i]*=nums[i];
        }
        sort(nums.begin(),nums.end());
        return nums;
    }
    
};







optimized

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
 
        int start=0;
        int end=nums.size()-1;
        vector<int> output(nums.size(), 0);
        for(int i=nums.size()-1;i>=0;i--)
        {
        if(abs(nums[start])>abs(nums[end]))
        {
            output[i]=nums[start]*nums[start];
            start++;
        }
        else
        {
            output[i]=nums[end]*nums[end];
            end--;
        }
        
    }
        return output;
    }
    
};
    
    
    
   
