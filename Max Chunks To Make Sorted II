You are given an integer array arr.

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 

Example 1:

Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.
Example 2:

Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].
However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.
 

Constraints:

1 <= arr.length <= 2000
0 <= arr[i] <= 108


class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        int n=arr.size();
        int a[n]; //  from right min array
        int val=INT_MAX;
        for(int i=n-1;i>=0;i--)
        {
            val=min(val,arr[i]);
            a[i]=val;
        }
        int count=1;
        val=INT_MIN;
        for(int i=0;i<n-1;i++)
        {   val=max(val,arr[i]); // max value till now
            if(val<=a[i+1])  // if next element index min value(a[i+1]) is greater than max value till 
                                now that means we have found on chunk
                count++;
        }
        return count;
    }
};





